//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Data.Entity.Infrastructure.MappingViews;

[assembly: DbMappingViewCacheTypeAttribute(
    typeof(Poject2.Models.ApplicationDbContext),
    typeof(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets8f9ee40f72adccecd4fe6870cb0e00f3dc8c58b31af903743c43580d5e24b6df))]

namespace Edm_EntityMappingGeneratedViews
{
    using System;
    using System.CodeDom.Compiler;
    using System.Data.Entity.Core.Metadata.Edm;

    /// <summary>
    /// Implements a mapping view cache.
    /// </summary>
    [GeneratedCode("Entity Framework 6 Power Tools", "0.9.2.0")]
    internal sealed class ViewsForBaseEntitySets8f9ee40f72adccecd4fe6870cb0e00f3dc8c58b31af903743c43580d5e24b6df : DbMappingViewCache
    {
        /// <summary>
        /// Gets a hash value computed over the mapping closure.
        /// </summary>
        public override string MappingHashValue
        {
            get { return "8f9ee40f72adccecd4fe6870cb0e00f3dc8c58b31af903743c43580d5e24b6df"; }
        }

        /// <summary>
        /// Gets a view corresponding to the specified extent.
        /// </summary>
        /// <param name="extent">The extent.</param>
        /// <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        public override DbMappingView GetView(EntitySetBase extent)
        {
            if (extent == null)
            {
                throw new ArgumentNullException("extent");
            }

            var extentName = extent.EntityContainer.Name + "." + extent.Name;

            if (extentName == "CodeFirstDatabase.Account")
            {
                return GetView0();
            }

            if (extentName == "CodeFirstDatabase.Address")
            {
                return GetView1();
            }

            if (extentName == "CodeFirstDatabase.City")
            {
                return GetView2();
            }

            if (extentName == "CodeFirstDatabase.Appointment")
            {
                return GetView3();
            }

            if (extentName == "CodeFirstDatabase.PersonType")
            {
                return GetView4();
            }

            if (extentName == "CodeFirstDatabase.States")
            {
                return GetView5();
            }

            if (extentName == "CodeFirstDatabase.BlockPerson")
            {
                return GetView6();
            }

            if (extentName == "CodeFirstDatabase.Doctor")
            {
                return GetView7();
            }

            if (extentName == "CodeFirstDatabase.MapAddress")
            {
                return GetView8();
            }

            if (extentName == "CodeFirstDatabase.Event")
            {
                return GetView9();
            }

            if (extentName == "CodeFirstDatabase.Person")
            {
                return GetView10();
            }

            if (extentName == "CodeFirstDatabase.Friend")
            {
                return GetView11();
            }

            if (extentName == "CodeFirstDatabase.Notifaciton")
            {
                return GetView12();
            }

            if (extentName == "CodeFirstDatabase.Post")
            {
                return GetView13();
            }

            if (extentName == "CodeFirstDatabase.Rating")
            {
                return GetView14();
            }

            if (extentName == "CodeFirstDatabase.Pacient")
            {
                return GetView15();
            }

            if (extentName == "CodeFirstDatabase.Student")
            {
                return GetView16();
            }

            if (extentName == "CodeFirstDatabase.Subject")
            {
                return GetView17();
            }

            if (extentName == "CodeFirstDatabase.transforPacient")
            {
                return GetView18();
            }

            if (extentName == "ApplicationDbContext.Account")
            {
                return GetView19();
            }

            if (extentName == "ApplicationDbContext.Address")
            {
                return GetView20();
            }

            if (extentName == "ApplicationDbContext.City")
            {
                return GetView21();
            }

            if (extentName == "ApplicationDbContext.Appointment")
            {
                return GetView22();
            }

            if (extentName == "ApplicationDbContext.Appointment_PersonTypeId")
            {
                return GetView23();
            }

            if (extentName == "ApplicationDbContext.PersonType")
            {
                return GetView24();
            }

            if (extentName == "ApplicationDbContext.States")
            {
                return GetView25();
            }

            if (extentName == "ApplicationDbContext.BlockPerson")
            {
                return GetView26();
            }

            if (extentName == "ApplicationDbContext.Doctor")
            {
                return GetView27();
            }

            if (extentName == "ApplicationDbContext.MapAddresses")
            {
                return GetView28();
            }

            if (extentName == "ApplicationDbContext.Events")
            {
                return GetView29();
            }

            if (extentName == "ApplicationDbContext.Person")
            {
                return GetView30();
            }

            if (extentName == "ApplicationDbContext.Friends")
            {
                return GetView31();
            }

            if (extentName == "ApplicationDbContext.Notifaction")
            {
                return GetView32();
            }

            if (extentName == "ApplicationDbContext.Person_ListNotifaction")
            {
                return GetView33();
            }

            if (extentName == "ApplicationDbContext.Post")
            {
                return GetView34();
            }

            if (extentName == "ApplicationDbContext.Rating")
            {
                return GetView35();
            }

            if (extentName == "ApplicationDbContext.Pacient")
            {
                return GetView36();
            }

            if (extentName == "ApplicationDbContext.Student")
            {
                return GetView37();
            }

            if (extentName == "ApplicationDbContext.Subject")
            {
                return GetView38();
            }

            if (extentName == "ApplicationDbContext.transforPacient")
            {
                return GetView39();
            }

            if (extentName == "CodeFirstDatabase.IdentityRole")
            {
                return GetView40();
            }

            if (extentName == "CodeFirstDatabase.IdentityUser")
            {
                return GetView41();
            }

            if (extentName == "CodeFirstDatabase.IdentityUserClaim")
            {
                return GetView42();
            }

            if (extentName == "CodeFirstDatabase.IdentityUserLogin")
            {
                return GetView43();
            }

            if (extentName == "CodeFirstDatabase.IdentityUserRole")
            {
                return GetView44();
            }

            if (extentName == "ApplicationDbContext.Roles")
            {
                return GetView45();
            }

            if (extentName == "ApplicationDbContext.IdentityUsers")
            {
                return GetView46();
            }

            if (extentName == "ApplicationDbContext.IdentityUserClaims")
            {
                return GetView47();
            }

            if (extentName == "ApplicationDbContext.IdentityUserClaim_User")
            {
                return GetView48();
            }

            if (extentName == "ApplicationDbContext.IdentityUserLogins")
            {
                return GetView49();
            }

            if (extentName == "ApplicationDbContext.IdentityUserRoles")
            {
                return GetView50();
            }

            if (extentName == "CodeFirstDatabase.survey")
            {
                return GetView51();
            }

            if (extentName == "ApplicationDbContext.survey")
            {
                return GetView52();
            }

            return null;
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Account.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView0()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Account
        [CodeFirstDatabaseSchema.Account](T1.Account_Id, T1.Account_Email, T1.Account_PassWord, T1.Account_updateAt, T1.Account_CreateAt)
    FROM (
        SELECT 
            T.Id AS Account_Id, 
            T.Email AS Account_Email, 
            T.PassWord AS Account_PassWord, 
            T.updateAt AS Account_updateAt, 
            T.CreateAt AS Account_CreateAt, 
            True AS _from0
        FROM ApplicationDbContext.Account AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Address.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView1()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Address
        [CodeFirstDatabaseSchema.Address](T1.Address_Id, T1.Address_CityId, T1.Address_section, T1.Address_Street)
    FROM (
        SELECT 
            T.Id AS Address_Id, 
            T.CityId AS Address_CityId, 
            T.section AS Address_section, 
            T.Street AS Address_Street, 
            True AS _from0
        FROM ApplicationDbContext.Address AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.City.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView2()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing City
        [CodeFirstDatabaseSchema.City](T1.City_Id, T1.City_Content)
    FROM (
        SELECT 
            T.Id AS City_Id, 
            T.Content AS City_Content, 
            True AS _from0
        FROM ApplicationDbContext.City AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Appointment.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView3()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Appointment
        [CodeFirstDatabaseSchema.Appointment](T3.Appointment_Id, T3.Appointment_Date, T3.Appointment_StatesId, T3.Appointment_Docid, T3.Appointment_PacientId, T3.[Appointment.PersonTypeId_id])
    FROM (
        SELECT T1.Appointment_Id, T1.Appointment_Date, T1.Appointment_StatesId, T1.Appointment_Docid, T1.Appointment_PacientId, T2.[Appointment.PersonTypeId_id], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.Id AS Appointment_Id, 
                T.Date AS Appointment_Date, 
                T.StatesId AS Appointment_StatesId, 
                T.Docid AS Appointment_Docid, 
                T.PacientId AS Appointment_PacientId, 
                True AS _from0
            FROM ApplicationDbContext.Appointment AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Appointment_PersonTypeId_Source).Id AS Appointment_Id, 
                Key(T.Appointment_PersonTypeId_Target).id AS [Appointment.PersonTypeId_id], 
                True AS _from1
            FROM ApplicationDbContext.Appointment_PersonTypeId AS T) AS T2
            ON T1.Appointment_Id = T2.Appointment_Id
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.PersonType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView4()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PersonType
        [CodeFirstDatabaseSchema.PersonType](T1.PersonType_id, T1.PersonType_type)
    FROM (
        SELECT 
            T.id AS PersonType_id, 
            T.type AS PersonType_type, 
            True AS _from0
        FROM ApplicationDbContext.PersonType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.States.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView5()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing States
        [CodeFirstDatabaseSchema.States](T1.States_Id, T1.States_Content)
    FROM (
        SELECT 
            T.Id AS States_Id, 
            T.Content AS States_Content, 
            True AS _from0
        FROM ApplicationDbContext.States AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.BlockPerson.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView6()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing BlockPerson
        [CodeFirstDatabaseSchema.BlockPerson](T1.BlockPerson_Id, T1.BlockPerson_BlockId, T1.BlockPerson_PersonId)
    FROM (
        SELECT 
            T.Id AS BlockPerson_Id, 
            T.BlockId AS BlockPerson_BlockId, 
            T.PersonId AS BlockPerson_PersonId, 
            True AS _from0
        FROM ApplicationDbContext.BlockPerson AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Doctor.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView7()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Doctor
        [CodeFirstDatabaseSchema.Doctor](T1.Doctor_Id, T1.Doctor_specializtion, T1.Doctor_AddressClinicId, T1.Doctor_personId)
    FROM (
        SELECT 
            T.Id AS Doctor_Id, 
            T.specializtion AS Doctor_specializtion, 
            T.AddressClinicId AS Doctor_AddressClinicId, 
            T.personId AS Doctor_personId, 
            True AS _from0
        FROM ApplicationDbContext.Doctor AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.MapAddress.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView8()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MapAddress
        [CodeFirstDatabaseSchema.MapAddress](T1.MapAddress_Id, T1.MapAddress_Xvalue, T1.MapAddress_Yvalue)
    FROM (
        SELECT 
            T.Id AS MapAddress_Id, 
            T.Xvalue AS MapAddress_Xvalue, 
            T.Yvalue AS MapAddress_Yvalue, 
            True AS _from0
        FROM ApplicationDbContext.MapAddresses AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Event.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView9()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Event
        [CodeFirstDatabaseSchema.Event](T1.Event_Id, T1.Event_Date, T1.Event_Content, T1.Event_DoctorId)
    FROM (
        SELECT 
            T.Id AS Event_Id, 
            T.Date AS Event_Date, 
            T.Content AS Event_Content, 
            T.DoctorId AS Event_DoctorId, 
            True AS _from0
        FROM ApplicationDbContext.Events AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Person.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView10()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Person
        [CodeFirstDatabaseSchema.Person](T1.Person_Id, T1.Person_fName, T1.Person_lName, T1.Person_BirthDate, T1.Person_Gender, T1.Person_PhoneNumber, T1.Person_personTypeId, T1.Person_AddressId, T1.Person_RatingId, T1.Person_AccountId)
    FROM (
        SELECT 
            T.Id AS Person_Id, 
            T.fName AS Person_fName, 
            T.lName AS Person_lName, 
            T.BirthDate AS Person_BirthDate, 
            T.Gender AS Person_Gender, 
            T.PhoneNumber AS Person_PhoneNumber, 
            T.personTypeId AS Person_personTypeId, 
            T.AddressId AS Person_AddressId, 
            T.RatingId AS Person_RatingId, 
            T.AccountId AS Person_AccountId, 
            True AS _from0
        FROM ApplicationDbContext.Person AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Friend.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView11()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Friend
        [CodeFirstDatabaseSchema.Friend](T1.Friend_id, T1.Friend_PersonId, T1.Friend_PersonFriend)
    FROM (
        SELECT 
            T.id AS Friend_id, 
            T.PersonId AS Friend_PersonId, 
            T.PersonFriend AS Friend_PersonFriend, 
            True AS _from0
        FROM ApplicationDbContext.Friends AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Notifaciton.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView12()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Notifaciton
        [CodeFirstDatabaseSchema.Notifaciton](T3.Notifaciton_Id, T3.Notifaciton_Content, T3.[Notifaciton.id_sender], T3.Notifaciton_idObject, T3.Notifaciton_type, T3.[Notifaciton.Person_Id])
    FROM (
        SELECT T1.Notifaciton_Id, T1.Notifaciton_Content, T1.[Notifaciton.id_sender], T1.Notifaciton_idObject, T1.Notifaciton_type, T2.[Notifaciton.Person_Id], T1._from0, (T2._from1 AND T2._from1 IS NOT NULL) AS _from1
        FROM  (
            SELECT 
                T.Id AS Notifaciton_Id, 
                T.Content AS Notifaciton_Content, 
                T.id_sender AS [Notifaciton.id_sender], 
                T.idObject AS Notifaciton_idObject, 
                T.type AS Notifaciton_type, 
                True AS _from0
            FROM ApplicationDbContext.Notifaction AS T) AS T1
            LEFT OUTER JOIN (
            SELECT 
                Key(T.Person_ListNotifaction_Target).Id AS Notifaciton_Id, 
                Key(T.Person_ListNotifaction_Source).Id AS [Notifaciton.Person_Id], 
                True AS _from1
            FROM ApplicationDbContext.Person_ListNotifaction AS T) AS T2
            ON T1.Notifaciton_Id = T2.Notifaciton_Id
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Post.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView13()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Post
        [CodeFirstDatabaseSchema.Post](T1.Post_Id, T1.Post_Date, T1.Post_Content, T1.Post_PersonId)
    FROM (
        SELECT 
            T.Id AS Post_Id, 
            T.Date AS Post_Date, 
            T.Content AS Post_Content, 
            T.PersonId AS Post_PersonId, 
            True AS _from0
        FROM ApplicationDbContext.Post AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Rating.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView14()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Rating
        [CodeFirstDatabaseSchema.Rating](T1.Rating_Id, T1.Rating_value, T1.Rating_Content)
    FROM (
        SELECT 
            T.Id AS Rating_Id, 
            T.[value] AS Rating_value, 
            T.Content AS Rating_Content, 
            True AS _from0
        FROM ApplicationDbContext.Rating AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Pacient.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView15()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Pacient
        [CodeFirstDatabaseSchema.Pacient](T1.Pacient_id, T1.Pacient_personId)
    FROM (
        SELECT 
            T.id AS Pacient_id, 
            T.personId AS Pacient_personId, 
            True AS _from0
        FROM ApplicationDbContext.Pacient AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Student.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView16()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Student
        [CodeFirstDatabaseSchema.Student](T1.Student_id, T1.Student_YearOfStated, T1.Student_personId)
    FROM (
        SELECT 
            T.id AS Student_id, 
            T.YearOfStated AS Student_YearOfStated, 
            T.personId AS Student_personId, 
            True AS _from0
        FROM ApplicationDbContext.Student AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.Subject.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView17()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Subject
        [CodeFirstDatabaseSchema.Subject](T1.Subject_Id, T1.Subject_Content, T1.Subject_StudentId)
    FROM (
        SELECT 
            T.Id AS Subject_Id, 
            T.Content AS Subject_Content, 
            T.StudentId AS Subject_StudentId, 
            True AS _from0
        FROM ApplicationDbContext.Subject AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.transforPacient.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView18()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing transforPacient
        [CodeFirstDatabaseSchema.transforPacient](T1.transforPacient_Id, T1.transforPacient_PacientId, T1.transforPacient_Date, T1.transforPacient_Reason, T1.transforPacient_DocRecId, T1.transforPacient_DocsendId)
    FROM (
        SELECT 
            T.Id AS transforPacient_Id, 
            T.PacientId AS transforPacient_PacientId, 
            T.Date AS transforPacient_Date, 
            T.Reason AS transforPacient_Reason, 
            T.DocRecId AS transforPacient_DocRecId, 
            T.DocsendId AS transforPacient_DocsendId, 
            True AS _from0
        FROM ApplicationDbContext.transforPacient AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Account.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView19()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Account
        [Poject2.Models.Account](T1.Account_Id, T1.Account_Email, T1.Account_PassWord, T1.Account_updateAt, T1.Account_CreateAt)
    FROM (
        SELECT 
            T.Id AS Account_Id, 
            T.Email AS Account_Email, 
            T.PassWord AS Account_PassWord, 
            T.updateAt AS Account_updateAt, 
            T.CreateAt AS Account_CreateAt, 
            True AS _from0
        FROM CodeFirstDatabase.Account AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Address.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView20()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Address
        [Poject2.Models.Address](T1.Address_Id, T1.Address_CityId, T1.Address_section, T1.Address_Street)
    FROM (
        SELECT 
            T.Id AS Address_Id, 
            T.CityId AS Address_CityId, 
            T.section AS Address_section, 
            T.Street AS Address_Street, 
            True AS _from0
        FROM CodeFirstDatabase.Address AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.City.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView21()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing City
        [Poject2.Models.City](T1.City_Id, T1.City_Content)
    FROM (
        SELECT 
            T.Id AS City_Id, 
            T.Content AS City_Content, 
            True AS _from0
        FROM CodeFirstDatabase.City AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Appointment.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView22()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Appointment
        [Poject2.Models.Appointment](T1.Appointment_Id, T1.Appointment_Date, T1.Appointment_StatesId, T1.Appointment_Docid, T1.Appointment_PacientId) WITH 
        RELATIONSHIP(CREATEREF(ApplicationDbContext.PersonType, ROW(T1.[Appointment_PersonTypeId.Appointment_PersonTypeId_Target.id]),[Poject2.Models.PersonType]),[Poject2.Models.Appointment_PersonTypeId],Appointment_PersonTypeId_Source,Appointment_PersonTypeId_Target) 
    FROM (
        SELECT 
            T.Id AS Appointment_Id, 
            T.Date AS Appointment_Date, 
            T.StatesId AS Appointment_StatesId, 
            T.Docid AS Appointment_Docid, 
            T.PacientId AS Appointment_PacientId, 
            True AS _from0, 
            T.PersonTypeId_id AS [Appointment_PersonTypeId.Appointment_PersonTypeId_Target.id]
        FROM CodeFirstDatabase.Appointment AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Appointment_PersonTypeId.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView23()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Appointment_PersonTypeId
        [Poject2.Models.Appointment_PersonTypeId](T3.[Appointment_PersonTypeId.Appointment_PersonTypeId_Source], T3.[Appointment_PersonTypeId.Appointment_PersonTypeId_Target])
    FROM (
        SELECT -- Constructing Appointment_PersonTypeId_Source
            CreateRef(ApplicationDbContext.Appointment, row(T2.[Appointment_PersonTypeId.Appointment_PersonTypeId_Source.Id]), [Poject2.Models.Appointment]) AS [Appointment_PersonTypeId.Appointment_PersonTypeId_Source], 
            T2.[Appointment_PersonTypeId.Appointment_PersonTypeId_Target]
        FROM (
            SELECT -- Constructing Appointment_PersonTypeId_Target
                T1.[Appointment_PersonTypeId.Appointment_PersonTypeId_Source.Id], 
                CreateRef(ApplicationDbContext.PersonType, row(T1.[Appointment_PersonTypeId.Appointment_PersonTypeId_Target.id]), [Poject2.Models.PersonType]) AS [Appointment_PersonTypeId.Appointment_PersonTypeId_Target]
            FROM (
                SELECT 
                    T.Id AS [Appointment_PersonTypeId.Appointment_PersonTypeId_Source.Id], 
                    T.PersonTypeId_id AS [Appointment_PersonTypeId.Appointment_PersonTypeId_Target.id], 
                    True AS _from0
                FROM CodeFirstDatabase.Appointment AS T
                WHERE T.PersonTypeId_id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.PersonType.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView24()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing PersonType
        [Poject2.Models.PersonType](T1.PersonType_id, T1.PersonType_type)
    FROM (
        SELECT 
            T.id AS PersonType_id, 
            T.type AS PersonType_type, 
            True AS _from0
        FROM CodeFirstDatabase.PersonType AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.States.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView25()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing States
        [Poject2.Models.States](T1.States_Id, T1.States_Content)
    FROM (
        SELECT 
            T.Id AS States_Id, 
            T.Content AS States_Content, 
            True AS _from0
        FROM CodeFirstDatabase.States AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.BlockPerson.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView26()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing BlockPerson
        [Poject2.Models.BlockPerson](T1.BlockPerson_Id, T1.BlockPerson_BlockId, T1.BlockPerson_PersonId)
    FROM (
        SELECT 
            T.Id AS BlockPerson_Id, 
            T.BlockId AS BlockPerson_BlockId, 
            T.PersonId AS BlockPerson_PersonId, 
            True AS _from0
        FROM CodeFirstDatabase.BlockPerson AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Doctor.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView27()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Doctor
        [Poject2.Models.Doctor](T1.Doctor_Id, T1.Doctor_specializtion, T1.Doctor_AddressClinicId, T1.Doctor_personId)
    FROM (
        SELECT 
            T.Id AS Doctor_Id, 
            T.specializtion AS Doctor_specializtion, 
            T.AddressClinicId AS Doctor_AddressClinicId, 
            T.personId AS Doctor_personId, 
            True AS _from0
        FROM CodeFirstDatabase.Doctor AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.MapAddresses.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView28()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing MapAddresses
        [Poject2.Models.MapAddress](T1.MapAddress_Id, T1.MapAddress_Xvalue, T1.MapAddress_Yvalue)
    FROM (
        SELECT 
            T.Id AS MapAddress_Id, 
            T.Xvalue AS MapAddress_Xvalue, 
            T.Yvalue AS MapAddress_Yvalue, 
            True AS _from0
        FROM CodeFirstDatabase.MapAddress AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Events.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView29()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Events
        [Poject2.Models.Event](T1.Event_Id, T1.Event_Date, T1.Event_Content, T1.Event_DoctorId)
    FROM (
        SELECT 
            T.Id AS Event_Id, 
            T.Date AS Event_Date, 
            T.Content AS Event_Content, 
            T.DoctorId AS Event_DoctorId, 
            True AS _from0
        FROM CodeFirstDatabase.Event AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Person.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView30()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Person
        [Poject2.Models.Person](T1.Person_Id, T1.Person_fName, T1.Person_lName, T1.Person_BirthDate, T1.Person_Gender, T1.Person_PhoneNumber, T1.Person_personTypeId, T1.Person_AddressId, T1.Person_RatingId, T1.Person_AccountId)
    FROM (
        SELECT 
            T.Id AS Person_Id, 
            T.fName AS Person_fName, 
            T.lName AS Person_lName, 
            T.BirthDate AS Person_BirthDate, 
            T.Gender AS Person_Gender, 
            T.PhoneNumber AS Person_PhoneNumber, 
            T.personTypeId AS Person_personTypeId, 
            T.AddressId AS Person_AddressId, 
            T.RatingId AS Person_RatingId, 
            T.AccountId AS Person_AccountId, 
            True AS _from0
        FROM CodeFirstDatabase.Person AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Friends.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView31()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Friends
        [Poject2.Models.Friend](T1.Friend_id, T1.Friend_PersonId, T1.Friend_PersonFriend)
    FROM (
        SELECT 
            T.id AS Friend_id, 
            T.PersonId AS Friend_PersonId, 
            T.PersonFriend AS Friend_PersonFriend, 
            True AS _from0
        FROM CodeFirstDatabase.Friend AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Notifaction.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView32()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Notifaction
        [Poject2.Models.Notifaciton](T1.Notifaciton_Id, T1.Notifaciton_Content, T1.[Notifaciton.id_sender], T1.Notifaciton_idObject, T1.Notifaciton_type) WITH 
        RELATIONSHIP(CREATEREF(ApplicationDbContext.Person, ROW(T1.[Person_ListNotifaction.Person_ListNotifaction_Source.Id]),[Poject2.Models.Person]),[Poject2.Models.Person_ListNotifaction],Person_ListNotifaction_Target,Person_ListNotifaction_Source) 
    FROM (
        SELECT 
            T.Id AS Notifaciton_Id, 
            T.Content AS Notifaciton_Content, 
            T.id_sender AS [Notifaciton.id_sender], 
            T.idObject AS Notifaciton_idObject, 
            T.type AS Notifaciton_type, 
            True AS _from0, 
            T.Person_Id AS [Person_ListNotifaction.Person_ListNotifaction_Source.Id]
        FROM CodeFirstDatabase.Notifaciton AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Person_ListNotifaction.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView33()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Person_ListNotifaction
        [Poject2.Models.Person_ListNotifaction](T3.[Person_ListNotifaction.Person_ListNotifaction_Source], T3.[Person_ListNotifaction.Person_ListNotifaction_Target])
    FROM (
        SELECT -- Constructing Person_ListNotifaction_Source
            CreateRef(ApplicationDbContext.Person, row(T2.[Person_ListNotifaction.Person_ListNotifaction_Source.Id]), [Poject2.Models.Person]) AS [Person_ListNotifaction.Person_ListNotifaction_Source], 
            T2.[Person_ListNotifaction.Person_ListNotifaction_Target]
        FROM (
            SELECT -- Constructing Person_ListNotifaction_Target
                T1.[Person_ListNotifaction.Person_ListNotifaction_Source.Id], 
                CreateRef(ApplicationDbContext.Notifaction, row(T1.[Person_ListNotifaction.Person_ListNotifaction_Target.Id]), [Poject2.Models.Notifaciton]) AS [Person_ListNotifaction.Person_ListNotifaction_Target]
            FROM (
                SELECT 
                    T.Person_Id AS [Person_ListNotifaction.Person_ListNotifaction_Source.Id], 
                    T.Id AS [Person_ListNotifaction.Person_ListNotifaction_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.Notifaciton AS T
                WHERE T.Person_Id IS NOT NULL
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Post.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView34()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Post
        [Poject2.Models.Post](T1.Post_Id, T1.Post_Date, T1.Post_Content, T1.Post_PersonId)
    FROM (
        SELECT 
            T.Id AS Post_Id, 
            T.Date AS Post_Date, 
            T.Content AS Post_Content, 
            T.PersonId AS Post_PersonId, 
            True AS _from0
        FROM CodeFirstDatabase.Post AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Rating.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView35()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Rating
        [Poject2.Models.Rating](T1.Rating_Id, T1.Rating_value, T1.Rating_Content)
    FROM (
        SELECT 
            T.Id AS Rating_Id, 
            T.[value] AS Rating_value, 
            T.Content AS Rating_Content, 
            True AS _from0
        FROM CodeFirstDatabase.Rating AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Pacient.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView36()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Pacient
        [Poject2.Models.Pacient](T1.Pacient_id, T1.Pacient_personId)
    FROM (
        SELECT 
            T.id AS Pacient_id, 
            T.personId AS Pacient_personId, 
            True AS _from0
        FROM CodeFirstDatabase.Pacient AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Student.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView37()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Student
        [Poject2.Models.Student](T1.Student_id, T1.Student_YearOfStated, T1.Student_personId)
    FROM (
        SELECT 
            T.id AS Student_id, 
            T.YearOfStated AS Student_YearOfStated, 
            T.personId AS Student_personId, 
            True AS _from0
        FROM CodeFirstDatabase.Student AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Subject.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView38()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Subject
        [Poject2.Models.Subject](T1.Subject_Id, T1.Subject_Content, T1.Subject_StudentId)
    FROM (
        SELECT 
            T.Id AS Subject_Id, 
            T.Content AS Subject_Content, 
            T.StudentId AS Subject_StudentId, 
            True AS _from0
        FROM CodeFirstDatabase.Subject AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.transforPacient.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView39()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing transforPacient
        [Poject2.Models.transforPacient](T1.transforPacient_Id, T1.transforPacient_PacientId, T1.transforPacient_Date, T1.transforPacient_Reason, T1.transforPacient_DocRecId, T1.transforPacient_DocsendId)
    FROM (
        SELECT 
            T.Id AS transforPacient_Id, 
            T.PacientId AS transforPacient_PacientId, 
            T.Date AS transforPacient_Date, 
            T.Reason AS transforPacient_Reason, 
            T.DocRecId AS transforPacient_DocRecId, 
            T.DocsendId AS transforPacient_DocsendId, 
            True AS _from0
        FROM CodeFirstDatabase.transforPacient AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityRole.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView40()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityRole
        [CodeFirstDatabaseSchema.IdentityRole](T1.IdentityRole_Id, T1.IdentityRole_Name)
    FROM (
        SELECT 
            T.Id AS IdentityRole_Id, 
            T.Name AS IdentityRole_Name, 
            True AS _from0
        FROM ApplicationDbContext.Roles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityUser.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView41()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUser
        [CodeFirstDatabaseSchema.IdentityUser](T2.IdentityUser_Id, T2.IdentityUser_UserName, T2.IdentityUser_PasswordHash, T2.IdentityUser_SecurityStamp, T2.IdentityUser_Discriminator)
    FROM (
        SELECT -- Constructing Discriminator
            T1.IdentityUser_Id, 
            T1.IdentityUser_UserName, 
            T1.IdentityUser_PasswordHash, 
            T1.IdentityUser_SecurityStamp, 
            CASE
                WHEN T1._from1 THEN N'ApplicationUser'
                ELSE N'IdentityUser'
            END AS IdentityUser_Discriminator
        FROM (
            SELECT 
                T.Id AS IdentityUser_Id, 
                T.UserName AS IdentityUser_UserName, 
                T.PasswordHash AS IdentityUser_PasswordHash, 
                T.SecurityStamp AS IdentityUser_SecurityStamp, 
                True AS _from0, 
                CASE WHEN T IS OF (ONLY [Poject2.Models.ApplicationUser]) THEN True ELSE False END AS _from1, 
                CASE WHEN T IS OF (ONLY [Poject2.Models.IdentityUser]) THEN True ELSE False END AS _from2
            FROM ApplicationDbContext.IdentityUsers AS T
        ) AS T1
    ) AS T2");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityUserClaim.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView42()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserClaim
        [CodeFirstDatabaseSchema.IdentityUserClaim](T3.IdentityUserClaim_Id, T3.IdentityUserClaim_ClaimType, T3.IdentityUserClaim_ClaimValue, T3.[IdentityUserClaim.User_Id])
    FROM (
        SELECT T1.IdentityUserClaim_Id, T2.IdentityUserClaim_ClaimType, T2.IdentityUserClaim_ClaimValue, T1.[IdentityUserClaim.User_Id], T2._from0, T1._from1
        FROM  (
            SELECT 
                Key(T.IdentityUserClaim_User_Source).Id AS IdentityUserClaim_Id, 
                Key(T.IdentityUserClaim_User_Target).Id AS [IdentityUserClaim.User_Id], 
                True AS _from1
            FROM ApplicationDbContext.IdentityUserClaim_User AS T) AS T1
            INNER JOIN (
            SELECT 
                T.Id AS IdentityUserClaim_Id, 
                T.ClaimType AS IdentityUserClaim_ClaimType, 
                T.ClaimValue AS IdentityUserClaim_ClaimValue, 
                True AS _from0
            FROM ApplicationDbContext.IdentityUserClaims AS T) AS T2
            ON T1.IdentityUserClaim_Id = T2.IdentityUserClaim_Id
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityUserLogin.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView43()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserLogin
        [CodeFirstDatabaseSchema.IdentityUserLogin](T1.IdentityUserLogin_UserId, T1.IdentityUserLogin_LoginProvider, T1.IdentityUserLogin_ProviderKey)
    FROM (
        SELECT 
            T.UserId AS IdentityUserLogin_UserId, 
            T.LoginProvider AS IdentityUserLogin_LoginProvider, 
            T.ProviderKey AS IdentityUserLogin_ProviderKey, 
            True AS _from0
        FROM ApplicationDbContext.IdentityUserLogins AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.IdentityUserRole.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView44()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserRole
        [CodeFirstDatabaseSchema.IdentityUserRole](T1.IdentityUserRole_UserId, T1.IdentityUserRole_RoleId)
    FROM (
        SELECT 
            T.UserId AS IdentityUserRole_UserId, 
            T.RoleId AS IdentityUserRole_RoleId, 
            True AS _from0
        FROM ApplicationDbContext.IdentityUserRoles AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.Roles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView45()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing Roles
        [Poject2.Models.IdentityRole](T1.IdentityRole_Id, T1.IdentityRole_Name)
    FROM (
        SELECT 
            T.Id AS IdentityRole_Id, 
            T.Name AS IdentityRole_Name, 
            True AS _from0
        FROM CodeFirstDatabase.IdentityRole AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.IdentityUsers.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView46()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUsers
        CASE
            WHEN T1._from2 THEN [Poject2.Models.IdentityUser](T1.IdentityUser_Id, T1.IdentityUser_UserName, T1.IdentityUser_PasswordHash, T1.IdentityUser_SecurityStamp)
            ELSE [Poject2.Models.ApplicationUser](T1.IdentityUser_Id, T1.IdentityUser_UserName, T1.IdentityUser_PasswordHash, T1.IdentityUser_SecurityStamp)
        END
    FROM (
        SELECT 
            T.Id AS IdentityUser_Id, 
            T.UserName AS IdentityUser_UserName, 
            T.PasswordHash AS IdentityUser_PasswordHash, 
            T.SecurityStamp AS IdentityUser_SecurityStamp, 
            True AS _from0, 
            CASE WHEN T.Discriminator = N'ApplicationUser' THEN True ELSE False END AS _from1, 
            CASE WHEN T.Discriminator = N'IdentityUser' THEN True ELSE False END AS _from2
        FROM CodeFirstDatabase.IdentityUser AS T
        WHERE T.Discriminator IN {N'ApplicationUser', N'IdentityUser'}
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.IdentityUserClaims.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView47()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserClaims
        [Poject2.Models.IdentityUserClaim](T1.IdentityUserClaim_Id, T1.IdentityUserClaim_ClaimType, T1.IdentityUserClaim_ClaimValue) WITH 
        RELATIONSHIP(CREATEREF(ApplicationDbContext.IdentityUsers, ROW(T1.[IdentityUserClaim_User.IdentityUserClaim_User_Target.Id]),[Poject2.Models.IdentityUser]),[Poject2.Models.IdentityUserClaim_User],IdentityUserClaim_User_Source,IdentityUserClaim_User_Target) 
    FROM (
        SELECT 
            T.Id AS IdentityUserClaim_Id, 
            T.ClaimType AS IdentityUserClaim_ClaimType, 
            T.ClaimValue AS IdentityUserClaim_ClaimValue, 
            True AS _from0, 
            T.User_Id AS [IdentityUserClaim_User.IdentityUserClaim_User_Target.Id]
        FROM CodeFirstDatabase.IdentityUserClaim AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.IdentityUserClaim_User.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView48()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserClaim_User
        [Poject2.Models.IdentityUserClaim_User](T3.[IdentityUserClaim_User.IdentityUserClaim_User_Source], T3.[IdentityUserClaim_User.IdentityUserClaim_User_Target])
    FROM (
        SELECT -- Constructing IdentityUserClaim_User_Source
            CreateRef(ApplicationDbContext.IdentityUserClaims, row(T2.[IdentityUserClaim_User.IdentityUserClaim_User_Source.Id]), [Poject2.Models.IdentityUserClaim]) AS [IdentityUserClaim_User.IdentityUserClaim_User_Source], 
            T2.[IdentityUserClaim_User.IdentityUserClaim_User_Target]
        FROM (
            SELECT -- Constructing IdentityUserClaim_User_Target
                T1.[IdentityUserClaim_User.IdentityUserClaim_User_Source.Id], 
                CreateRef(ApplicationDbContext.IdentityUsers, row(T1.[IdentityUserClaim_User.IdentityUserClaim_User_Target.Id]), [Poject2.Models.IdentityUser]) AS [IdentityUserClaim_User.IdentityUserClaim_User_Target]
            FROM (
                SELECT 
                    T.Id AS [IdentityUserClaim_User.IdentityUserClaim_User_Source.Id], 
                    T.User_Id AS [IdentityUserClaim_User.IdentityUserClaim_User_Target.Id], 
                    True AS _from0
                FROM CodeFirstDatabase.IdentityUserClaim AS T
            ) AS T1
        ) AS T2
    ) AS T3");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.IdentityUserLogins.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView49()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserLogins
        [Poject2.Models.IdentityUserLogin](T1.IdentityUserLogin_UserId, T1.IdentityUserLogin_LoginProvider, T1.IdentityUserLogin_ProviderKey)
    FROM (
        SELECT 
            T.UserId AS IdentityUserLogin_UserId, 
            T.LoginProvider AS IdentityUserLogin_LoginProvider, 
            T.ProviderKey AS IdentityUserLogin_ProviderKey, 
            True AS _from0
        FROM CodeFirstDatabase.IdentityUserLogin AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.IdentityUserRoles.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView50()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing IdentityUserRoles
        [Poject2.Models.IdentityUserRole](T1.IdentityUserRole_UserId, T1.IdentityUserRole_RoleId)
    FROM (
        SELECT 
            T.UserId AS IdentityUserRole_UserId, 
            T.RoleId AS IdentityUserRole_RoleId, 
            True AS _from0
        FROM CodeFirstDatabase.IdentityUserRole AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for CodeFirstDatabase.survey.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView51()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing survey
        [CodeFirstDatabaseSchema.survey](T1.survey_Id, T1.survey_Content)
    FROM (
        SELECT 
            T.Id AS survey_Id, 
            T.Content AS survey_Content, 
            True AS _from0
        FROM ApplicationDbContext.survey AS T
    ) AS T1");
        }

        /// <summary>
        /// Gets the view for ApplicationDbContext.survey.
        /// </summary>
        /// <returns>The mapping view.</returns>
        private static DbMappingView GetView52()
        {
            return new DbMappingView(@"
    SELECT VALUE -- Constructing survey
        [Poject2.Models.survey](T1.survey_Id, T1.survey_Content)
    FROM (
        SELECT 
            T.Id AS survey_Id, 
            T.Content AS survey_Content, 
            True AS _from0
        FROM CodeFirstDatabase.survey AS T
    ) AS T1");
        }
    }
}
